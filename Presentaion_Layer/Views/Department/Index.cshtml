
@model IEnumerable<DepartmentDetailsToReturnDto>
@{
    @* 
    View Data ==> 3.5 ==> enforce type safety [strongly typed]
    ViewBag ==> 4.0 ==> can not enforce type safety [weakly typed]
    *@
    string? viewDataMsg = ViewData["message"]as string;// enforce type safety [compilation time]
    string? VIewBagMsg = ViewBag.message; // can not enforce type safety [CLR]

    // performance for viewData is better ==> type at compilation time 
    // Readability ==> ViewBag is better 
    ViewData["Title"] = "Index";
}
@*
*@
@if (!string.IsNullOrEmpty(TempData["message"] as string))
{
    <div class="alert alert-success ">
        @TempData["message"]
    </div> // we can also use toaster to make it better from bootstrap 
}

<div class=" alert alert-info">
    @ViewData["message"]
</div>

<h1>All Department</h1>
<a class="btn btn-primary" asp-controller="Department" asp-action="Create"> Create Department</a>
<br />  
@if (Model.Count() > 0)
{
    <table class="table table-striped table-hover nt-3">
        <thead class="text-center">
            <tr>
                <th>@Html.DisplayNameFor(d=>d.Code)</th>
                <th>@Html.DisplayNameFor(d => d.Name)</th>
                <th>@Html.DisplayNameFor(d => d.CreationDate)</th>
                <th>Details</th>
                <th>Update</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody class="text-center">
            @foreach(var department in Model)
            {
                <tr>
                    <td>@department.Code</td>
                    <td>@department.Name</td>
                    <td>@department.CreationDate</td>
                   <partial name = "_buttonPartial" model="@department.Id" />

                  

                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info mt-3">
        <h2> no departments found </h2>

    </div>
    
}